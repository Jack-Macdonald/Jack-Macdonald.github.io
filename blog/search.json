[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nProject\n\n\n\n\n\n\ndata visualization\n\n\n\n \n\n\n\n\n\nNov 29, 2023\n\n\nJack Macdonald, Veronica Kopper, Xiaoyan Zhang, Su Lin Goh\n\n\n\n\n\n\n\n\n\n\n\n\nHack-A-Thon\n\n\n\n\n\n\ndata visualization\n\n\nHack-A-Thon\n\n\n\n \n\n\n\n\n\nOct 20, 2023\n\n\nJack Macdonald, Veronica Kopper, Xiaoyan Zhang, Su Lin Goh\n\n\n\n\n\n\n\n\n\n\n\n\nAssigment 6\n\n\n\n\n\n\ndata methods\n\n\nassignment\n\n\n\n \n\n\n\n\n\nOct 20, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization Proposal\n\n\n\n\n\n\ndata visualization\n\n\nproposal\n\n\n\n \n\n\n\n\n\nOct 11, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment Three\n\n\n\n\n\n\ndata methods\n\n\nassignment\n\n\n\n \n\n\n\n\n\nOct 10, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nData Methods Proposal\n\n\n\n\n\n\ndata methods\n\n\nproposal\n\n\n\n \n\n\n\n\n\nOct 10, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nHack-A-Thon\n\n\n\n\n\n\ndata visualization\n\n\nHack-A-Thon\n\n\n\n \n\n\n\n\n\nSep 29, 2023\n\n\nJack Macdonald, Veronica Kopper, Xiaoyan Zhang, Su Lin Goh\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment Three\n\n\n\n\n\n\ndata visualization\n\n\nassignment\n\n\n\n \n\n\n\n\n\nSep 27, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment Two\n\n\n\n\n\n\ndata methods\n\n\nassignment\n\n\n\n \n\n\n\n\n\nSep 26, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment Two\n\n\n\n\n\n\ndata visualization\n\n\nassignment\n\n\n\n \n\n\n\n\n\nSep 18, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment One\n\n\n\n\n\n\ndata visualization\n\n\nassignment\n\n\n\n \n\n\n\n\n\nSep 13, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment One\n\n\n\n\n\n\ndata methods\n\n\nassignment\n\n\n\n \n\n\n\n\n\nSep 12, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 3, 2023\n\n\nJack Macdonald\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Assignment One",
    "section": "",
    "text": "Q1)\nHere is the survey. It includes the changes from question three to six.\nQ2)\nA) The survey is comprised of a primer at the beginning followed by 17 questions.\nB) The questions ask the for opinions about at-home movie watching and some demographic questions at the end.\nC) There are blocks of three or four questions that relate to one another then it moves on to another related topic. For example, questions 4-6 all relate to proposed software that could detect possible not safe for work content. At the end, there are five questions about the individual.\nQ3-6) The changes to the survey were made in the published survey.\nQ7) Question two is not mobile friendly. The users cannot read the questions and all of the answer ranges at once. They must scroll left and right to find all of answer choices. This is also an issue of the questions with answer choices that are oriented horizontally."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a masters student at the University of Texas at Dallas studying data science and social data analytics.\nI graduated with a degree in Political Science from UTD in the fall of 2022 and continued working on my masters degree."
  },
  {
    "objectID": "posts/6356assignment1/index.html",
    "href": "posts/6356assignment1/index.html",
    "title": "Assignment One",
    "section": "",
    "text": "Q1) Anscombe\n\n\nShow Hidden Code\ndata(anscombe)\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  #print(anova(lmi))\n}\n\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\nQ2) Generative Art\nGenerative Art is created using an autonomous system with a set of parameters or boundaries. AI generated art has gained popularity with recent developments in consumer AI programs. Programs like Midjourney and OpenAI’s DALL-E are two examples. You can give a prompt to these programs and they will generate artwork based on it. This is not the only example of generative art. Hans Haacke used a form of generative art with Condensation Cube. The process of the condensation forming on the inside of the cube is the autonomous creation of this type of generative art. Generative art can also come in the form of music. Brian Eno is a musician that pioneered generative music. He created an album called “Generative Music 1” with the use of SSEYO’s Koan generative music system.\n\n\n\n\n\n\nNightCafe Art with the prompt “A Bob Ross painting in the style of Monet”\n\n\n\n\n\n\n\nCondensation Cube by Hans Haacke\n\n\n\n\n\n\n\nBrian Eno’s album Generative Music 1 (1996)\n\n\n\n\n\nQ3) Fall.R\n\n\nShow Hidden Code\nlibrary(gsubfn)\nlibrary(tidyverse)\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %>% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %>% rbind(points)->points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %>%\n      rbind(status) -> status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]->points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %>%\n      rbind(points) -> points\n    status[-1,]->status\n  }\n}\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"tomato3\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme(panel.background = element_rect(fill = \"wheat\"),\n        panel.grid = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text  = element_blank())\n\n\n\n\n\nQ4) Chart Critique\n\nThis is a chart that shows the location of popular pizza chains throughout the United States. While the graph does show a lot of data, it struggles with showing that data clearly. The points on the map are very small and that makes it difficult to interpret. The color palette does not help with interpretation either. A palette that has higher contrast color scheme may help, but with the points being so small, it would be difficult. Finally, while most people have a decent understanding of the size and scale of the United States, the map is missing a scale."
  },
  {
    "objectID": "posts/6302assignment2/index.html",
    "href": "posts/6302assignment2/index.html",
    "title": "Assignment Two",
    "section": "",
    "text": "Q2) Trends\n\n\n(If the graph does not show, click here to go to the site)\n\n\n\n\n\ngtrends.r\n\n\n\n\n\nlibrary(gtrendsR)\nBidenTrumpElection = gtrends(c(\"trump\",\"biden\",\"Election\"), time = \"now 7-d\")\npar(family=\"Georgia\")\nplot(BidenTrumpElection)\n\nWhen comparing the website data to the data collected in R, there is a difference between the number of hits collected by the two methods. The graphs look very similar because because the number of hits is very similar, just not quite the same. Both processes produce the data in the same way. When set to gather data over the span of a week, it collects the number of hits per hour for each search. That then can be used to create a plot showing the change over time. At time of writing this blog, the term “trump” has skyrocketed due to recent news and that can be seen in both graphs. (September 26th)\n\n\nClick here if Google Trends graph did not show\n\nHere are static photos of both the google trends website and library to show how similar they are. This will not be the most recent data (Sept. 19 - Sept. 26)"
  },
  {
    "objectID": "posts/6356assignment2/index.html",
    "href": "posts/6356assignment2/index.html",
    "title": "Assignment Two",
    "section": "",
    "text": "Q1a) Rerun Murrell\n\n\nShow Code\npar(mfrow=c(3, 2))\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"white\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Persp\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6))) \n\n\n\n\n\n\n\n\n\nQ1b) Happy Planet Index"
  },
  {
    "objectID": "posts/6356assignment3/index.html",
    "href": "posts/6356assignment3/index.html",
    "title": "Assignment Three",
    "section": "",
    "text": "Q1) Anscombe Redux\n\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\n\n\nlm1 <- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\nQ2) Fine Tuning\n\n\nShow Code\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0), family = \"Georgia\")\n\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"deeppink2\", pch = \"&\", bg = \"violetred2\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"maroon2\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\nQ3) ggplot\n\n\nShow Code\nlibrary(ggplot2)\nslope <- coef(lm1)[2]\nintercept <- coef(lm1)[1]\nggplot(anscombe, aes(x1,y1))+\n  geom_point(col=\"deeppink2\", size = 5, pch = \"&\")+\n  geom_abline(intercept = intercept, slope = slope, col = \"maroon2\")+\n  theme(text = element_text(family = \"Georgia\"))+\n  labs(title = \"Anscombe Model 1\")\n\n\n\n\n\nQ4) Pre-Hack-a-Thon\nIt is possible that the labels for the graph will not display properly, if so the output is shown in a drop down below.\n\n\nShow Code\nlibrary(ggplot2)\nowidata = read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\nowidata = owidata[!grepl(\"^OWID\", owidata$iso_code), ]\nowideuro = subset(owidata, continent==\"Europe\")\n\nowideuro[is.na(owideuro)] <- 0\n\nowideuro$date <- as.Date(owideuro$date)\nsubset <- owideuro[c(20737,59890,59897,64552,32603,21472),]\n\nggplot(owideuro, aes(date, new_deaths))+\n  geom_point(col=\"deeppink2\", size=.75) +\n  geom_text(data = subset,\n            aes(label = location), \n            family = \"Georgia\",\n            vjust = -.75,\n            hjust = -.05)+\n  labs(x=\"Date\",y=\"COVID Deaths in Europe (Daily)\")+\n  theme(text = element_text(family = \"Georgia\"),\n        axis.text.x = element_text(angle = 90),\n        axis.text.y = element_text(angle = 90, hjust = .5),\n        axis.ticks.x = element_blank(),\n        panel.border = element_rect(fill = NA, color = \"black\", linewidth = 1),\n        panel.background = element_blank())+\n  scale_x_date(date_breaks = \"2 month\",\n               date_labels = \"%Y-%m\",\n               limits = c(as.Date(\"2020-02-03\"),max(owideuro$date))\n               )+\n  scale_y_continuous(breaks = seq(0,6000, by = 1000),\n                     labels = c(0,1000,\"\",3000,\"\",5000,\"\"))\n\n\n\n\n\n\n\nCorrect Graph"
  },
  {
    "objectID": "posts/6356assignment4/index.html",
    "href": "posts/6356assignment4/index.html",
    "title": "Hack-A-Thon",
    "section": "",
    "text": "Chart One - Variable Width Chart\nHere we created a graph using the “Iris” data set in R. There are three bars for each species that shows the average Pedal Length. The width is controlled by the average pedal width.\n\n\n\n\n\n\n\nShow the Code\nlibrary(ggplot2)\ndata(\"iris\")\nirisPlot <- data.frame(\n  Species = c(\"setosa\",\"versicolor\",\"virginica\"),\n  Pedal.Length = c(5.006,5.936,6.588),\n  Pedal.Width = c(3.428,2.770,2.974),\n  Sepal.Length = c(1.462,4.260,5.552),\n  Sepal.Width = c(0.246,1.326,2.026)\n)\n\nggplot(irisPlot, aes(x = Species, y = Pedal.Length, width=(Pedal.Width)/4))+\n  geom_bar(fill = \"orange2\", stat = \"identity\")\n\n\nChart Two - Table Embedded with Charts\nSticking with the Iris data, our table of charts is a scatterplot matrix of the correlations between each of the variables in the dataset, colored by each species.\n\n\n\n\n\n\n\nShow the Code\ndata(\"iris\")\nmy_cols <- c(\"#beaed4\", \"#fdc086\", \"#7fc97f\")  \npairs(iris[,1:4], pch = 19,  cex = 0.5,\n      col = my_cols[iris$Species])\n\n\nThree - Horizontal Bar Chart\nFor this we moved to the COVID data set that we used for a previous assignment. Here we showed the amount of new COVID cases in Germany over a duration of four years.\n\n\n\n\n\n\n\nShow the Code\nlibrary(vroom)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n\nowidall = vroom(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\nowidgerm <- subset(owidall, location==\"Germany\")\n\npalette <- brewer.pal(7, \"YlGn\")                        #Picking the Palette\ncuts <- cut(owidgerm$new_cases,7)                       #Cutting the data into 7 classes\ncolors <- palette[cuts]\n\nggplot(owidgerm, aes(x = date))+\n  geom_bar(aes(y = new_cases, col=colors), stat = \"identity\", show.legend = F)+\n  coord_flip()\n\n\nChart Four - Overlapping Column Chart\nFinally for this chart we compared the amount of vaccinations per continent for each year. The color of the bars corresponds to each year and the height is the logarithm of the number of vaccinations for each continent.\n\n\n\n\n\n\n\nShow the Code\nowidall = vroom(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\nowid20 = subset(owidall, format(date, \"%Y\") == \"2020\")\nowid21 = subset(owidall, format(date, \"%Y\") == \"2021\")\nowid22 = subset(owidall, format(date, \"%Y\") == \"2022\")\nowid23 = subset(owidall, format(date, \"%Y\") == \"2023\")\n\nvax20 <- aggregate(new_vaccinations ~ continent, data = owid20, FUN = sum)\nvax21 <- aggregate(new_vaccinations ~ continent, data = owid21, FUN = sum)\nvax22 <- aggregate(new_vaccinations ~ continent, data = owid22, FUN = sum)\nvax23 <- aggregate(new_vaccinations ~ continent, data = owid23, FUN = sum)\nall <- data.frame(\n  \"continent\" <- c(\"Africa\",\"Asia\",\"Europe\",\"N. America\",\"Oceania\",\"S. America\"),\n  \"2020\" <- c(1,1016774,316297,5785031,1,31136)\n)\n\nall$\"2021\" <- vax21$new_vaccinations\nall$\"2022\" <- vax22$new_vaccinations\nall$\"2023\" <- vax23$new_vaccinations\n\ncolnames(all) <- c(\"continent\",2020,2021,2022,2023)\nggplot(all, aes(x = continent)) +\n  geom_bar(aes(y = log(all$\"2021\")), stat = \"identity\", fill = \"#beaed4\",    position = position_nudge(x = -0.05), width = 0.5) +\n  geom_bar(aes(y = log(all$\"2022\")), stat = \"identity\", fill = \"#fdc086\",  position = position_nudge(x = 0.10),  width = 0.5) +\n  geom_bar(aes(y = log(all$\"2023\")), stat = \"identity\", fill = \"#ffff99\", position = position_nudge(x = 0.05), width = 0.5) +\n  geom_bar(aes(y = log(all$\"2020\")), stat = \"identity\", fill = \"#7fc97f\",   position = position_nudge(x = -0.10), width = 0.5) +\n  ylab(\"Number of Vaccinations\")+\n  xlab(\"Continent\")+\n  theme(axis.text.x = element_text(angle = 315, hjust = 0))"
  },
  {
    "objectID": "posts/Methods Proposal/index.html",
    "href": "posts/Methods Proposal/index.html",
    "title": "Data Methods Proposal",
    "section": "",
    "text": "Proposal Slides"
  },
  {
    "objectID": "posts/6302assignment3/index.html",
    "href": "posts/6302assignment3/index.html",
    "title": "Assignment Three",
    "section": "",
    "text": "Analyze) Biden-Xi Summit\n\nsum_twt = summit$text\ntoks = tokens(sum_twt)\nsumtwtdfm &lt;- dfm(toks)\n\n# Latent Semantic Analysis\nsum_lsa &lt;- textmodel_lsa(sumtwtdfm)\n#summary(sum_lsa)\ntweet_dfm &lt;- tokens(sum_twt, remove_punct = TRUE) %&gt;%\n  dfm()\n#head(tweet_dfm)\ntag_dfm &lt;- dfm_select(tweet_dfm, pattern = \"#*\")\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\n#head(toptag, 10)\n\ntag_fcm &lt;- fcm(tag_dfm)\n#head(tag_fcm)\ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\ntextplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 5)\nuser_dfm &lt;- dfm_select(tweet_dfm, pattern = \"@*\")\ntopuser &lt;- names(topfeatures(user_dfm, 50))\n#head(topuser, 20)\nuser_fcm &lt;- fcm(user_dfm)\n#head(user_fcm, 20)\n\nuser_fcm &lt;- fcm_select(user_fcm, pattern = topuser)\ntextplot_network(user_fcm, min_freq = 20, edge_color = \"firebrick\", edge_alpha = 0.8, edge_size = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyze) Speeches\n\nkwic(tokens(data_corpus_inaugural_subset), pattern = \"american\") %&gt;%\n  textplot_xray()\n\n\ntextplot_xray(\n  kwic(data_corpus_inaugural_subset, pattern = \"american\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"people\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"communist\")\n)"
  },
  {
    "objectID": "posts/Data Vis Proposal/index.html",
    "href": "posts/Data Vis Proposal/index.html",
    "title": "Data Visualization Proposal",
    "section": "",
    "text": "Proposal Slides"
  },
  {
    "objectID": "posts/6356assignment7/index.html",
    "href": "posts/6356assignment7/index.html",
    "title": "Hack-A-Thon",
    "section": "",
    "text": "Chart Nine - Scatter Plot\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"mtcars\")\n\nui &lt;- fluidPage(\n  titlePanel(\"mtcars Scatter Plot\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"VarX\",\n                  label = \"Select X-axis Variable:\",\n                  choices = list(\"mpg\",\"disp\", \"hp\",\"drat\", \"wt\",\"qsec\",\"carb\")),\n      selectInput(inputId = \"VarY\",\n                  label = \"Select Y-axis Variable:\",\n                  choices = list(\"disp\",\"mpg\", \"hp\",\"drat\", \"wt\",\"qsec\",\"carb\")), \n      selectInput(inputId = \"Color\",\n                  label = \"Select Color Variable:\",\n                  choices = as.list(c(\"am\",\"vs\", \"gear\",\"cyl\")))\n    ),\n    mainPanel(plotOutput(\"scatter\")\n              \n    )\n  )\n)\n\n server &lt;- shinyServer(function(input, output) {\n   \n  output$scatter &lt;- renderPlot({\n    mtc &lt;- mtcars[ ,c(input$VarX,input$VarY,input$Color)]\n    mtc[,3] &lt;- as.factor(mtc[,3])\n    \n    ggplot(data = mtc, aes(x=mtc[,1],y=mtc[,2],color=mtc[,3],size=4))+\n      geom_point()+\n      scale_color_manual(values = palette.colors(7,\"Dark2\"))+\n      labs(x=colnames(mtc)[1], y=colnames(mtc)[2],\n           color=colnames(mtc)[3],\n           title = paste(\"Scatter Plot of\", input$VarX, \"v.\", input$VarY))+\n      guides(size = F)\n    \n  })\n  \n})\n\nshinyApp(ui, server)\n\n\nChart Eighteen - Table Embedded with Charts\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"gapminder\")\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder Bubble Plot\"),\n  sidebarLayout(\n    sidebarPanel(\n      checkboxGroupInput(\"region\", \"Select Continent:\", unique(gapminder$continent), selected = \"Asia\"),\n      sliderInput(\"year\", \"Select Year:\", \n                  min = min(gapminder$year), \n                  max = max(gapminder$year), \n                  value = 1952,\n                  step = 5,\n                  animate = \n                    animationOptions(800,T))\n    ),\n    mainPanel(\n      plotOutput(\"scatterplot\")\n    )\n  )\n)\n\n\n\nserver &lt;- function(input, output) {\n  filtered &lt;- reactive({\n    gapminder %&gt;%\n      filter(continent %in% input$region, year == input$year)\n  })\n\n    output$scatterplot &lt;- renderPlot({\n      ggplot(filtered(), aes(gdpPercap, lifeExp, size = pop, col = continent)) +\n        geom_point(pch=1, aes(stroke = 1)) +\n        scale_size_continuous(range = c(6, 18))+\n        scale_color_manual(values = palette.colors(7,\"Dark2\"))+\n        scale_x_continuous(limits=c(0,60000))+\n        scale_y_continuous(limits=c(20,90))+\n        labs(x = \"GDP per Capita\", y = \"Life Expectancy\", \n             title = paste(\"GPD v. Life Expectancy for Year: \", input$year))+\n        theme_bw()\n    })\n}\n\nshinyApp(ui, server)\n\n\nChart Ten - Horizontal Bar Chart\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"gapminder\")\nattach(gapminder)\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder 3D Chart\"),\n  selectInput(\"region\", \"Choose Continent\", \n              choices = unique(gapminder$continent), selected = \"Asia\"),\n  plotlyOutput(\"graph\", width = \"100%\", height = \"600px\")  \n)\n\nserver &lt;- function(input, output, session){\n  filtered &lt;- reactive({\n    gapminder %&gt;%\n      filter(continent %in% input$region)\n  })\n  \n  output$graph &lt;- renderPlotly({\n    plot_ly(filtered(), \n            x = ~gdpPercap, \n            y = ~lifeExp, \n            z = ~year,\n            color = ~year,\n            text = ~n,\n            hoverinfo = \"text\",\n            hovertext = ~country\n            ) %&gt;%\n      add_markers()\n  })\n}\n\nshinyApp(ui, server)\n\n\n&lt;iframe height=\"800\" width=\"100%\" frameborder=\"no\" src=\"https://jack-macdonald.shinyapps.io/Hack-A-Thon-3D/\"&gt; &lt;/iframe&gt;"
  },
  {
    "objectID": "posts/6356project/index.html",
    "href": "posts/6356project/index.html",
    "title": "Project",
    "section": "",
    "text": "Slides\n\n\n\nShiny App\n \n\n\nShow Hidden Code\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(ggplot2)\nlibrary(leaflet)\n\nhouse &lt;- house &lt;- read.csv(\"Copy of house_data.csv\")\ncol &lt;- c(\"PRICE\",\"ADDRESS\",\n         \"CITY\",\"STATE.OR.PROVINCE\",\n         \"ZIP.OR.POSTAL.CODE\",\"SOLD.DATE\",\n         \"BEDS\",\"BATHS\",\"SQUARE.FEET\",\n         \"LOT.SIZE\",\"YEAR.BUILT\",\"LATITUDE\",\n         \"LONGITUDE\",\"URL..SEE.https...www.redfin.com.buy.a.home.comparative.market.analysis.FOR.INFO.ON.PRICING.\")\nhouse &lt;- house[col]\n\nheader &lt;- dashboardHeader(\n  title = \"Frisco Home Sales\"\n)\n\nbody &lt;- dashboardBody(\n  fluidRow(\n    column(width = 9,\n           box(width = NULL, solidHeader = T,\n               leafletOutput(\"map\", height = 500)\n           )\n    ),\n    column(width = 3,\n      box(width = NULL,\n          radioButtons(\"price_range\", \"Select Price Range\",\n                       choices = c(\"$100,000-$200,000\", \n                                   \"$200,000-$300,000\", \n                                   \"$300,000-$400,000\", \n                                   \"$400,000-$500,000\", \n                                   \"$500,000-$600,000\",\n                                   \"$600,000-$700,000\",\n                                   \"$700,000 and Above\"),\n                       selected =  \"$100,000-$200,000\"),\n      ),\n      box(width = NULL,\n          sliderInput(\"bedroom_range\", \"Select Number of Bedrooms\",\n                      min = min(house$BEDS),\n                      max = max(house$BEDS),\n                      value = c(min(house$BEDS), max(house$BEDS)),\n                      step = 1),\n      ),\n      box(width = NULL,\n          sliderInput(\"bathroom_range\", \"Select Number of Bathrooms\",\n                      min = min(house$BATHS),\n                      max = max(house$BATHS),\n                      value = c(min(house$BATHS), max(house$BATHS)),\n                      step = 0.5)\n      )\n    )\n  ),\n  fluidRow(\n    column(width = 12,\n      box(width = NULL, solidHeader = T, style = 'overflow-x: scroll',\n          dataTableOutput(\"filtered_table\")\n      )\n    )\n  )\n)\n\nui &lt;- dashboardPage(\n  skin = \"green\",\n  header,\n  dashboardSidebar(disable = T),\n  body\n)\n\nserver &lt;- function(input,output){\n  filtered_data &lt;- reactive({\n    price_range &lt;- switch(input$price_range,\n                          \"$100,000-$200,000\"  = house$PRICE &gt;= 100000 & house$PRICE &lt; 200000,\n                          \"$200,000-$300,000\"  = house$PRICE &gt;= 200000 & house$PRICE &lt; 300000,\n                          \"$300,000-$400,000\"  = house$PRICE &gt;= 300000 & house$PRICE &lt; 400000,\n                          \"$400,000-$500,000\"  = house$PRICE &gt;= 400000 & house$PRICE &lt; 500000,\n                          \"$500,000-$600,000\"  = house$PRICE &gt;= 500000 & house$PRICE &lt; 600000,\n                          \"$600,000-$700,000\"  = house$PRICE &gt;= 600000 & house$PRICE &lt; 700000,\n                          \"$700,000 and Above\" = house$PRICE &gt;= 500000)\n    subset(house, \n           price_range&\n             BEDS  &gt;= input$bedroom_range[1] & BEDS &lt;= input$bedroom_range[2] &\n             BATHS &gt;= input$bathroom_range[1] & BATHS &lt;= input$bathroom_range[2]\n    )\n  })\n  \n  output$filtered_table &lt;- renderDataTable({\n    filtered_data()\n  })\n  \n  output$map &lt;- renderLeaflet({\n    houseMap &lt;- leaflet(data = filtered_data)  \n    \n    esri &lt;- grep(\"^Esri\", providers, value = TRUE)\n    \n    for (provider in esri) {\n      houseMap &lt;- houseMap %&gt;% addProviderTiles(provider, group = provider)\n    }\n    \n    houseMap %&gt;%\n      addLayersControl(baseGroups = names(esri),\n                       options = layersControlOptions(collapsed = TRUE)) %&gt;%\n      addMarkers(data = filtered_data() %&gt;% as.data.frame(),\n                 lat = ~LATITUDE, lng = ~LONGITUDE, \n                 popup = ~paste(\"Address: \", ADDRESS, \n                                \"&lt;br&gt;Price: $\", PRICE, \n                                \"&lt;br&gt;Bed/Bath: \",BEDS,\"/\",BATHS,\n                                \"&lt;br&gt;Date of Sale: \", SOLD.DATE,\n                                \"&lt;br&gt;House on &lt;a href='\", URL..SEE.https...www.redfin.com.buy.a.home.comparative.market.analysis.FOR.INFO.ON.PRICING., \"' target='_blank'&gt;Redfin&lt;/a&gt;\"))\n    \n  })\n}\n\nshinyApp(ui, server)"
  }
]