[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jack’s Blog",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDec 5, 2023\n\n\n6302 Project\n\n\nJack Macdonald\n\n\n\n\nNov 29, 2023\n\n\n6356 Project\n\n\nJack Macdonald, Veronica Kopper, Xiaoyan Zhang, Su Lin Goh\n\n\n\n\nNov 15, 2023\n\n\n6356 Assignment 10\n\n\nJack Macdonald\n\n\n\n\nNov 14, 2023\n\n\n6302 Assignment 7\n\n\nJack Macdonald\n\n\n\n\nNov 8, 2023\n\n\n6356 Assignment 9\n\n\nJack Macdonald\n\n\n\n\nNov 1, 2023\n\n\n6356 Assignment 8\n\n\nJack Macdonald\n\n\n\n\nOct 31, 2023\n\n\n6302 Assignment 6\n\n\nJack Macdonald\n\n\n\n\nOct 30, 2023\n\n\n6302 Assignment 5\n\n\nJack Macdonald\n\n\n\n\nOct 24, 2023\n\n\n6302 Assignment 4\n\n\nJack Macdonald\n\n\n\n\nOct 20, 2023\n\n\nHack-A-Thon\n\n\nJack Macdonald, Veronica Kopper, Xiaoyan Zhang, Su Lin Goh\n\n\n\n\nOct 18, 2023\n\n\n6356 Assignment 6\n\n\nJack Macdonald\n\n\n\n\nOct 17, 2023\n\n\n6302 Assignment 3\n\n\nJack Macdonald\n\n\n\n\nOct 11, 2023\n\n\n6356 Proposal\n\n\nJack Macdonald\n\n\n\n\nOct 11, 2023\n\n\n6356 Assignment 5\n\n\nJack Macdonald\n\n\n\n\nOct 10, 2023\n\n\n6302 Proposal\n\n\nJack Macdonald\n\n\n\n\nOct 4, 2023\n\n\n6536 Assignment 4\n\n\nJack Macdonald\n\n\n\n\nSep 27, 2023\n\n\n6356 Assignment 3\n\n\nJack Macdonald\n\n\n\n\nSep 26, 2023\n\n\n6302 Assignment 2\n\n\nJack Macdonald\n\n\n\n\nSep 18, 2023\n\n\n6356 Assignment 2\n\n\nJack Macdonald\n\n\n\n\nSep 13, 2023\n\n\n6356 Assignment 1\n\n\nJack Macdonald\n\n\n\n\nSep 12, 2023\n\n\n6302 Assignment 1\n\n\nJack Macdonald\n\n\n\n\nSep 3, 2023\n\n\nWelcome To My Blog\n\n\nJack Macdonald\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/6302assignment1/index.html",
    "href": "posts/6302assignment1/index.html",
    "title": "6302 Assignment 1",
    "section": "",
    "text": "Q1)\nHere is the survey. It includes the changes from question three to six.\nQ2)\nA) The survey is comprised of a primer at the beginning followed by 17 questions.\nB) The questions ask the for opinions about at-home movie watching and some demographic questions at the end.\nC) There are blocks of three or four questions that relate to one another then it moves on to another related topic. For example, questions 4-6 all relate to proposed software that could detect possible not safe for work content. At the end, there are five questions about the individual.\nQ3-6) The changes to the survey were made in the published survey.\nQ7) Question two is not mobile friendly. The users cannot read the questions and all of the answer ranges at once. They must scroll left and right to find all of answer choices. This is also an issue of the questions with answer choices that are oriented horizontally."
  },
  {
    "objectID": "posts/6302assignment2/index.html",
    "href": "posts/6302assignment2/index.html",
    "title": "6302 Assignment Two",
    "section": "",
    "text": "Q2) Trends\n\n\n(If the graph does not show, click here to go to the site)\n\n\n\n\n\ngtrends.r\n\n\n\n\n\nlibrary(gtrendsR)\nBidenTrumpElection = gtrends(c(\"trump\",\"biden\",\"Election\"), time = \"now 7-d\")\npar(family=\"Georgia\")\nplot(BidenTrumpElection)\n\nWhen comparing the website data to the data collected in R, there is a difference between the number of hits collected by the two methods. The graphs look very similar because because the number of hits is very similar, just not quite the same. Both processes produce the data in the same way. When set to gather data over the span of a week, it collects the number of hits per hour for each search. That then can be used to create a plot showing the change over time. At time of writing this blog, the term “trump” has skyrocketed due to recent news and that can be seen in both graphs. (September 26th)\n\n\nClick here if Google Trends graph did not show\n\nHere are static photos of both the google trends website and library to show how similar they are. This will not be the most recent data (Sept. 19 - Sept. 26)"
  },
  {
    "objectID": "posts/6302assignment3/index.html",
    "href": "posts/6302assignment3/index.html",
    "title": "6302 Assignment 3",
    "section": "",
    "text": "Analyze) Biden-Xi Summit\n\nsum_twt = summit$text\ntoks = tokens(sum_twt)\nsumtwtdfm &lt;- dfm(toks)\n\n# Latent Semantic Analysis\nsum_lsa &lt;- textmodel_lsa(sumtwtdfm)\n#summary(sum_lsa)\ntweet_dfm &lt;- tokens(sum_twt, remove_punct = TRUE) %&gt;%\n  dfm()\n#head(tweet_dfm)\ntag_dfm &lt;- dfm_select(tweet_dfm, pattern = \"#*\")\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\n#head(toptag, 10)\n\ntag_fcm &lt;- fcm(tag_dfm)\n#head(tag_fcm)\ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\ntextplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 5)\nuser_dfm &lt;- dfm_select(tweet_dfm, pattern = \"@*\")\ntopuser &lt;- names(topfeatures(user_dfm, 50))\n#head(topuser, 20)\nuser_fcm &lt;- fcm(user_dfm)\n#head(user_fcm, 20)\n\nuser_fcm &lt;- fcm_select(user_fcm, pattern = topuser)\ntextplot_network(user_fcm, min_freq = 20, edge_color = \"firebrick\", edge_alpha = 0.8, edge_size = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyze) Speeches\n\nkwic(tokens(data_corpus_inaugural_subset), pattern = \"american\") %&gt;%\n  textplot_xray()\n\n\ntextplot_xray(\n  kwic(data_corpus_inaugural_subset, pattern = \"american\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"people\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"communist\")\n)"
  },
  {
    "objectID": "posts/6302assignment4/index.html",
    "href": "posts/6302assignment4/index.html",
    "title": "6302 Assignment Four",
    "section": "",
    "text": "1) YouTubenews01.R\n\nlibrary(tuber)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(stringi)\nlibrary(wordcloud)\nlibrary(gridExtra)\nlibrary(httr)\n\nyt_oauth(\"189833128111-e7fqqklvjpfenbpr553uqv4g3oqog6mp.apps.googleusercontent.com\",\"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\", token = \"\")\nyyt_israelprotest = yt_search(term = \"Israel protest\")\n\nvideocat_us= list_videocats(c(region_code = \"us\"))\nmostpop = list_videos()\n\nmostpop_us = list_videos(video_category_id = \"25\",   region_code = \"US\", max_results = 10)\n\nnbcnews_stat = get_channel_stats(\"UCeY0bbntWzzVIaj2z3QigXg\")\nnbcnews_detail = get_video_details(video_id = \"to0YqKKRIWY\")\n\ncurl::curl_version()\nhttr::set_config(httr::config(http_version = 0)) # Fix curl issue\n\nnbc_videos1 = yt_search(term=\"\", type=\"video\", channel_id = \"UCeY0bbntWzzVIaj2z3QigXg\")\nnbc_videos = nbc_videos1 %&gt;%\n  mutate(date = as.Date(publishedAt)) %&gt;%\n  filter(date &gt; \"2022-11-27\") %&gt;%\n  arrange(date)\nsamplecomment = get_comment_threads(c(video_id = \"to0YqKKRIWY\"), max_results = 600)\nsamplecomment2 = get_all_comments(c(video_id = \"to0YqKKRIWY\"), max_results = 600)\n\n2) Analysis\n\nlibrary(quanteda)\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(readr)\nlibrary(ggplot2)\nload(\"youtube.RData\")\n\nsum_comment = samplecomment$textOriginal\ntoks = tokens(sum_comment)\nsumcomdfm &lt;- dfm(toks)\n\n\nsum_lsa &lt;- textmodel_lsa(sumcomdfm)\nsummary(sum_lsa)\n\n                Length Class     Mode   \nsk                  10 -none-    numeric\ndocs             11000 -none-    numeric\nfeatures          8550 -none-    numeric\nmatrix_low_rank 940500 -none-    numeric\ndata            940500 dgCMatrix S4     \n\n\n3) Quanteda Attempt\n\ntube_dfm &lt;- tokens(sum_comment, remove_punct = TRUE) %&gt;%\n  dfm()\nhead(tube_dfm)\n\nDocument-feature matrix of: 6 documents, 842 features (99.58% sparse) and 0 docvars.\n       features\ndocs    wow yes lens cape the name fuentes does not sound\n  text1   1   0    0    0   0    0       0    0   0     0\n  text2   0   1    0    0   0    0       0    0   0     0\n  text3   0   1    0    0   0    0       0    0   0     0\n  text4   0   0    1    1   0    0       0    0   0     0\n  text5   0   0    0    0   1    1       1    1   1     1\n  text6   0   0    0    0   0    0       0    0   0     0\n[ reached max_nfeat ... 832 more features ]\n\ntag_dfm &lt;- dfm_select(tube_dfm, pattern = \"#*\")\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\nhead(toptag, 10)\n\n[1] \"#defund\"\n\ntag_fcm &lt;- fcm(tag_dfm)\nhead(tag_fcm)\n\nFeature co-occurrence matrix of: 1 by 1 feature.\n         features\nfeatures  #defund\n  #defund       0\n\ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\n#textplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 5)\n\nQuanteda fails here because it does not find enough similarity in the comments to create connections. The errors states that there need to have co-occurrences higher than the threshold. This is because it fails to find co-occurrences greater than zero."
  },
  {
    "objectID": "posts/6302assignment5/index.html",
    "href": "posts/6302assignment5/index.html",
    "title": "6302 Assignment Five",
    "section": "",
    "text": "1) rvest01\n\nlibrary(tidyverse)\nlibrary(rvest)\n\nurl &lt;- 'https://en.wikipedia.org/wiki/List_of_countries_by_foreign-exchange_reserves'\n\nwikiforreserve &lt;- read_html(url)\n\nforeignreserve &lt;- wikiforreserve %&gt;%\n  html_nodes(xpath='//*[@id=\"mw-content-text\"]/div/table[1]') %&gt;%\n  html_table()\nfores = foreignreserve[[1]]\n\n\nnames(fores) &lt;- c(\"Rank\", \"Country\", \"Forexres\", \"Date\", \"Change\", \"Sources\")\ncolnames(fores)\n\n[1] \"Rank\"     \"Country\"  \"Forexres\" \"Date\"     \"Change\"   \"Sources\" \n\nhead(fores$Country, n=10)\n\n [1] \"China\"        \"Japan\"        \"Switzerland\"  \"India\"        \"Russia\"      \n [6] \"Taiwan\"       \"Saudi Arabia\" \"Hong Kong\"    \"South Korea\"  \"Brazil\"      \n\n\n2) rvest02\n\nlibrary(tidyverse)\n\nurl1 = \"https://www.imdb.com/search/title/?release_date=2022-01-01,2023-01-01\"\nimdb2022 &lt;- read_html(url1)\nnode &lt;- \".ratingGroup--imdb-rating\"\n\nrank_data_html &lt;- html_nodes(imdb2022,node)\nresult &lt;- substr(html_text(rank_data_html), 1, 3)\n\nrank_data &lt;- as.numeric(result)\nhead(rank_data, n = 10)\n\n [1] 8.0 8.0 8.1 6.3 8.6 7.7 6.5 6.7 8.3 8.5\n\ntitle_data_html &lt;- html_nodes(imdb2022,'.ipc-title__text')\ntitle_data &lt;- html_text(title_data_html)\nhead(title_data, n =20)\n\n [1] \"Advanced search\"                      \n [2] \"1. Slow Horses\"                       \n [3] \"2. The Gilded Age\"                    \n [4] \"3. Reacher\"                           \n [5] \"4. The Santa Clauses\"                 \n [6] \"5. The Bear\"                          \n [7] \"6. From\"                              \n [8] \"7. X\"                                 \n [9] \"8. Violent Night\"                     \n[10] \"9. Julia\"                             \n[11] \"10. House of the Dragon\"              \n[12] \"11. Talk to Me\"                       \n[13] \"12. The Batman\"                       \n[14] \"13. Everything Everywhere All at Once\"\n[15] \"14. Bosch: Legacy\"                    \n[16] \"15. Uncharted\"                        \n[17] \"16. Severance\"                        \n[18] \"17. 1923\"                             \n[19] \"18. Spirited\"                         \n[20] \"19. Wednesday\"                        \n\n\n3) textmining1\n\nlibrary(easypackages)\n\n\npackages(\"XML\",\"wordcloud\",\"RColorBrewer\",\"NLP\",\"tm\",\"quanteda\", prompt = T)\n\nmlkLocation &lt;-URLencode(\"http://www.historyplace.com/speeches/churchill-hour.htm\")\n\ndoc.html&lt;- htmlTreeParse(mlkLocation, useInternal=TRUE)\nmlk &lt;- unlist(xpathApply(doc.html, '//p', xmlValue))\n\nwords.vec &lt;- VectorSource(mlk)\nwords.corpus &lt;- Corpus(words.vec)\nwords.corpus &lt;- tm_map(words.corpus, content_transformer(tolower))\nwords.corpus &lt;- tm_map(words.corpus, removePunctuation)\nwords.corpus &lt;- tm_map(words.corpus, removeNumbers)\nwords.corpus &lt;- tm_map(words.corpus, removeWords, stopwords(\"english\"))\n\ntdm &lt;- TermDocumentMatrix(words.corpus)\ninspect(tdm)\n\n&lt;&lt;TermDocumentMatrix (terms: 1179, documents: 39)&gt;&gt;\nNon-/sparse entries: 1952/44029\nSparsity           : 96%\nMaximal term length: 15\nWeighting          : term frequency (tf)\nSample             :\n         Docs\nTerms     11 14 16 17 18 20 22 25 30 9\n  air      0  0  0  1  0 13  3  0  0 0\n  battle   0  0  1  0  0  0  3  0  0 2\n  british  0  0  1  0  0  1  0  0  1 3\n  force    0  2  0  1  0  4  3  0  0 1\n  france   0  1  0  0  0  1  2  0  3 2\n  french   0  0  0  0  0  0  1  0  7 6\n  great    0  0  0  4  0  3  3  1  1 0\n  large    0  3  0  3  2  0  0  0  0 0\n  upon     0  0  0  1  0  0  0  3  1 1\n  war      1  0  2  2  1  0  1  2  1 0\n\nm &lt;- as.matrix(tdm)\nwordCounts &lt;- rowSums(m)\nwordCounts &lt;- sort(wordCounts, decreasing=TRUE)\nhead(wordCounts)\n\n   war    air france  great french   upon \n    24     23     20     20     19     16 \n\ncloudFrame&lt;-data.frame(word=names(wordCounts),freq=wordCounts)\n\nset.seed(1234)\nwordcloud(cloudFrame$word,cloudFrame$freq)\n\n\n\n\n\n\n\nwordcloud(names(wordCounts),wordCounts, min.freq=3,random.order=FALSE, max.words=500,scale=c(3,.5), rot.per=0.35,colors=brewer.pal(8,\"Dark2\"))"
  },
  {
    "objectID": "posts/6302assignment6/index.html",
    "href": "posts/6302assignment6/index.html",
    "title": "6302 Assigment Six",
    "section": "",
    "text": "1) govdata01\n\nlibrary(purrr)\nlibrary(magrittr)\nload(\"gov.RData\")\n\ngovfiles$id = govfiles$packageId\npdf_govfiles_url = govfiles$pdfLink\npdf_govfiles_id &lt;- govfiles$id\n\ndownload_govfiles_pdf &lt;- function(url, id) {\n  tryCatch({\n    destfile &lt;- paste0(save_dir, \"govfiles_\", id, \".pdf\")\n    download.file(url, destfile = destfile, mode = \"wb\") \n    Sys.sleep(runif(1, 1, 3)) \n    return(paste(\"Successfully downloaded:\", url))\n  },\n  error = function(e) {\n    return(paste(\"Failed to download:\", url))\n  })\n}\n\n#results &lt;- 1:length(pdf_govfiles_url) %&gt;% \n#  purrr::map_chr(~ download_govfiles_pdf(pdf_govfiles_url[.], pdf_govfiles_id[.]))\n\nprint(results)\n\n [1] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-1.pdf\" \n [2] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-2.pdf\" \n [3] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-3.pdf\" \n [4] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-4.pdf\" \n [5] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-5.pdf\" \n [6] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-6.pdf\" \n [7] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-7.pdf\" \n [8] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-8.pdf\" \n [9] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-9.pdf\" \n[10] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-10.pdf\"\n[11] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-11.pdf\"\n[12] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-12.pdf\"\n[13] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-13.pdf\"\n[14] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-14.pdf\"\n[15] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-15.pdf\"\n[16] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-16.pdf\"\n[17] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-17.pdf\"\n[18] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-18.pdf\"\n[19] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-19.pdf\"\n[20] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-20.pdf\"\n[21] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-21.pdf\"\n[22] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-22.pdf\"\n[23] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-23.pdf\"\n[24] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-24.pdf\"\n[25] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-25.pdf\"\n[26] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-26.pdf\"\n[27] \"Successfully downloaded: https://www.govinfo.gov/content/pkg/BUDGET-2024-BUD/pdf/BUDGET-2024-BUD-27.pdf\"\n\n\n2) parallel.r\n\nlibrary(parallel)\nlibrary(pdftools)\n\nnum_cores &lt;- detectCores()\ncl &lt;- makeCluster(num_cores)\n\nclusterEvalQ(cl, library(pdftools))\n\nread_pdf_to_text &lt;- function(uri) {\n  text &lt;- pdftools::pdf_text(uri)\n  return(text)\n}\n\ntic()\npdf_texts &lt;- parLapply(cfa_ch, read_pdf_to_text, mc.cores = num_cores)\ntoc()\n\nstopCluster(cl)"
  },
  {
    "objectID": "posts/6302assignment7/index.html",
    "href": "posts/6302assignment7/index.html",
    "title": "6302 Assignment Seven",
    "section": "",
    "text": "1) Spatial Data 1\n\nacs09 = tidycensus::load_variables(2009, \"acs5\", cache = TRUE)\nacs09_Profile = load_variables(2009 , \"acs5/profile\", cache = TRUE)\nus_median_age09 &lt;- get_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2009,\n  survey = \"acs1\",\n  geometry = TRUE,\n  resolution = \"20m\"\n) %&gt;%\n  shift_geometry()\n\nggplot(data = us_median_age09, aes(fill = estimate)) + \n  geom_sf(col=\"white\") +  \n  theme_bw() +\n  scale_fill_distiller(palette = \"PuBuGn\",  \n                       direction = 1) + \n  labs(title = \"  Median Age by State, 2009\",\n       caption = \"Data source: 2009 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nacs19 = tidycensus::load_variables(2019, \"acs5\", cache = TRUE)\nacs19_Profile = load_variables(2019 , \"acs5/profile\", cache = TRUE)\nus_median_age19 &lt;- get_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2019,\n  survey = \"acs1\",\n  geometry = TRUE,\n  resolution = \"20m\"\n) %&gt;%\n  shift_geometry()\n\nggplot(data = us_median_age19, aes(fill = estimate)) + \n  geom_sf(col=\"white\") +  \n  theme_bw() +\n  scale_fill_distiller(palette = \"PuBuGn\",  \n                       direction = 1) + \n  labs(title = \"  Median Age by State, 2019\",\n       caption = \"Data source: 2019 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nus_median_age19$dif &lt;- (us_median_age19$estimate - us_median_age09$estimate)\n\nggplot(data = us_median_age19, aes(fill = dif)) + \n  geom_sf(col=\"white\") +\n  theme_bw() +\n  scale_fill_distiller(palette = \"RdBu\",\n                       direction = 1) + \n  labs(title = \"  Difference in Median Age by State, 2009 to 2019\",\n       caption = \"Data source: 2009 and 2019 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n2) Spatial Data 2\n\ntx_income &lt;- get_acs(\n  geography = \"tract\", \n  variables = \"B19013_001\",\n  state = \"TX\", \n  year = 2020,\n  geometry = TRUE\n)\nplot(tx_income[\"estimate\"])\n\n\n\n\n\n\n\nlibrary(tmap)\ntmap_mode(\"view\")\n\ndallas_income &lt;- get_acs(\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  year = 2020,\n  state = \"TX\",\n  county = \"Dallas\",\n  geometry = TRUE\n)\n\ntm_shape(dallas_income) + \n  tm_fill(col = \"estimate\", palette = \"YlOrRd\",\n          alpha = 0.5)\n\n\n\n\nlibrary(mapview)\nmapView(dallas_income, zcol = \"estimate\")"
  },
  {
    "objectID": "posts/6302proposal/index.html",
    "href": "posts/6302proposal/index.html",
    "title": "6302 Proposal",
    "section": "",
    "text": "Proposal Slides"
  },
  {
    "objectID": "posts/6302project/index.html",
    "href": "posts/6302project/index.html",
    "title": "6302 Project",
    "section": "",
    "text": "Slides\n\n\n\nShiny App\n \n\n\nShow Hidden Code\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\nlibrary(htmltools)\n\nshow &lt;- read.csv(\"pop_wide.csv\")\ninfo &lt;- read.csv(\"info.csv\")\n\nshow_long &lt;- show %&gt;%\n  gather(key = \"Title\", value = \"Value\", -Month) %&gt;%\n  mutate(Value = as.numeric(Value)) %&gt;%\n  filter(Value &gt; 0)\n\nserver &lt;- function(input, output) {\n  output$trendsPlot &lt;- renderPlotly({\n    selected_show &lt;- show_long %&gt;%\n      filter(Title == input$show)\n    \n    show_info &lt;- merge(selected_show, info, by.x = \"Title\", by.y = \"Title\")\n    \n    plot &lt;- plot_ly(selected_show) %&gt;%\n      add_lines(x = ~Month, y = ~Value, name = \"Relative Popularity\", color = \"firebrick1\") %&gt;%\n      add_trace(\n        type = \"scatter\",\n        mode = \"lines\",\n        x = show_info$debut_date,\n        line = list(dash = \"dot\", color = \"darkred\"),\n        name = \"Debut Date\"\n      ) %&gt;%\n      layout(\n        title = paste(\"Google Trends for\", input$show),\n        xaxis = list(title = \"Month\"),\n        yaxis = list(title = \"Relative Popularity\",\n                     range = c(0,max(selected_show$Value)))\n      )\n    \n    plot\n  })\n  output$showImage &lt;- renderUI({\n    image_url &lt;- info$image[info$Title == input$show]\n    links &lt;- info$link[info$Title == input$show]\n    tags$a(\n      href=links,\n      target='_blank',\n      tags$img(src=image_url, \n               title=\"Example Image Link\", \n               style = \"max-width:100%\")\n    )\n  })\n  \n  output$rating &lt;- renderText({\n    ratings &lt;- info$Average_Score[info$Title == input$show]\n    paste(\"Average Google Rating: \", ratings)\n  })\n  \n  output$title &lt;- renderText({\n    titles &lt;- info$Title[info$Title == input$show]\n    paste(titles)\n  })\n  \n  output$cancel &lt;- renderText({\n    cancellation &lt;- ifelse(info$Cancel[info$Title == input$show] == 1, \"Cancelled\", \"Ongoing\")\n    paste(\"Cancellation Status: \", cancellation)\n  })\n\n}\n\nheader &lt;- dashboardHeader(\n  title = \"Gone Too Soon\"\n)\n\nbody &lt;- dashboardBody(\n  fluidRow(\n    column(width = 3,\n      box(width = NULL,\n          selectInput(\"show\", \"Select Show:\", choices = unique(show_long$Title))\n      ),\n      box(width = NULL,\n          htmlOutput(\"showImage\")\n      ),\n      box(width = NULL,\n          textOutput(\"title\"),\n          textOutput(\"rating\"),\n          textOutput(\"cancel\")\n      )\n    ),\n    column(width = 9,\n      box(width = NULL,\n           plotlyOutput(\"trendsPlot\")\n      )\n    )\n  )\n)\n\nui2 &lt;- dashboardPage(\n  skin = \"red\",\n  header,\n  dashboardSidebar(disable = T),\n  body\n)\n\nshinyApp(ui2, server)"
  },
  {
    "objectID": "posts/6356assignment1/index.html",
    "href": "posts/6356assignment1/index.html",
    "title": "6356 Assignment 1",
    "section": "",
    "text": "Q1) Anscombe\n\n\nShow Hidden Code\ndata(anscombe)\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  #print(anova(lmi))\n}\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\n\n\n\n\nQ2) Generative Art\nGenerative Art is created using an autonomous system with a set of parameters or boundaries. AI generated art has gained popularity with recent developments in consumer AI programs. Programs like Midjourney and OpenAI’s DALL-E are two examples. You can give a prompt to these programs and they will generate artwork based on it. This is not the only example of generative art. Hans Haacke used a form of generative art with Condensation Cube. The process of the condensation forming on the inside of the cube is the autonomous creation of this type of generative art. Generative art can also come in the form of music. Brian Eno is a musician that pioneered generative music. He created an album called “Generative Music 1” with the use of SSEYO’s Koan generative music system.\n\n\n\n\n\n\n\n\nNightCafe Art with the prompt “A Bob Ross painting in the style of Monet”\n\n\n\n\n\nCondensation Cube by Hans Haacke\n\n\n\n\n\nBrian Eno’s album Generative Music 1 (1996)\n\n\n\n\nQ3) Fall.R\n\n\nShow Hidden Code\nlibrary(proto)\nlibrary(tidyverse)\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"tomato3\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme(panel.background = element_rect(fill = \"wheat\"),\n        panel.grid = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text  = element_blank())\n\n\n\nQ4) Chart Critique\n\nThis is a chart that shows the location of popular pizza chains throughout the United States. While the graph does show a lot of data, it struggles with showing that data clearly. The points on the map are very small and that makes it difficult to interpret. The color palette does not help with interpretation either. A palette that has higher contrast color scheme may help, but with the points being so small, it would be difficult. Finally, while most people have a decent understanding of the size and scale of the United States, the map is missing a scale."
  },
  {
    "objectID": "posts/6356assignment2/index.html",
    "href": "posts/6356assignment2/index.html",
    "title": "6356 Assignment 2",
    "section": "",
    "text": "Q1a) Rerun Murrell\n\n\nShow Code\npar(mfrow=c(3, 2))\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"white\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Persp\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6))) \n\n\n\n\n\n\n\n\n\nQ2) Happy Planet Index\n\n\nShow Code\nlibrary(Lock5Data)\ndata(\"HappyPlanetIndex\")\n\npar(mfrow=c(2, 2))\n\nplot(HappyPlanetIndex$GDPperCapita, HappyPlanetIndex$HPI, main=\"GDP per Capita vs HPI\", xlab=\"GDP per Capita\", ylab=\"HPI\")\n\nbarplot(HappyPlanetIndex$Happiness, names.arg=HappyPlanetIndex$Country, main=\"Happiness by Country\", xlab=\"Country\", ylab=\"Happiness\")\n\nboxplot(HappyPlanetIndex$Happiness ~ HappyPlanetIndex$Region, main=\"Happiness by Region\", xlab=\"Region\", ylab=\"Happiness\")\n\nhist(HappyPlanetIndex$LifeExpectancy, main=\"Life Expectancy Distribution\", xlab=\"Life Expectancy\", ylab=\"Frequency\", col=\"white\", border=\"black\")"
  },
  {
    "objectID": "posts/6356assignment3/index.html",
    "href": "posts/6356assignment3/index.html",
    "title": "6356 Assignment 3",
    "section": "",
    "text": "Q1) Anscombe Redux\n\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\n\n\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\nQ2) Fine Tuning\n\n\nShow Code\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0), family = \"Georgia\")\n\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"deeppink2\", pch = \"&\", bg = \"violetred2\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"maroon2\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\n\n\n\n\nQ3) ggplot\n\n\nShow Code\nlibrary(ggplot2)\nslope &lt;- coef(lm1)[2]\nintercept &lt;- coef(lm1)[1]\nggplot(anscombe, aes(x1,y1))+\n  geom_point(col=\"deeppink2\", size = 5, pch = \"&\")+\n  geom_abline(intercept = intercept, slope = slope, col = \"maroon2\")+\n  theme(text = element_text(family = \"Georgia\"))+\n  labs(title = \"Anscombe Model 1\")\n\n\n\n\n\n\n\n\n\nQ4) Pre-Hack-a-Thon\nIt is possible that the labels for the graph will not display properly, if so the output is shown in a drop down below.\n\n\nShow Code\nlibrary(ggplot2)\nowidata = read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\nowidata = owidata[!grepl(\"^OWID\", owidata$iso_code), ]\nowideuro = subset(owidata, continent==\"Europe\")\n\nowideuro[is.na(owideuro)] &lt;- 0\n\nowideuro$date &lt;- as.Date(owideuro$date)\nsubset &lt;- owideuro[c(20737,59890,59897,64552,32603,21472),]\n\nggplot(owideuro, aes(date, new_deaths))+\n  geom_point(col=\"deeppink2\", size=.75) +\n  geom_text(data = subset,\n            aes(label = location), \n            family = \"Georgia\",\n            vjust = -.75,\n            hjust = -.05)+\n  labs(x=\"Date\",y=\"COVID Deaths in Europe (Daily)\")+\n  theme(text = element_text(family = \"Georgia\"),\n        axis.text.x = element_text(angle = 90),\n        axis.text.y = element_text(angle = 90, hjust = .5),\n        axis.ticks.x = element_blank(),\n        panel.border = element_rect(fill = NA, color = \"black\", linewidth = 1),\n        panel.background = element_blank())+\n  scale_x_date(date_breaks = \"2 month\",\n               date_labels = \"%Y-%m\",\n               limits = c(as.Date(\"2020-02-03\"),max(owideuro$date))\n               )+\n  scale_y_continuous(breaks = seq(0,6000, by = 1000),\n                     labels = c(0,1000,\"\",3000,\"\",5000,\"\"))\n\n\n\n\n\n\n\n\n\n\n\nCorrect Graph"
  },
  {
    "objectID": "posts/6356assignment4/index.html",
    "href": "posts/6356assignment4/index.html",
    "title": "6536 Assignment 4",
    "section": "",
    "text": "Chart One - Variable Width Chart\nHere we created a graph using the “Iris” data set in R. There are three bars for each species that shows the average Pedal Length. The width is controlled by the average pedal width.\n\n\n\n\n\n\n\n\n\n\n\nShow the Code\nlibrary(ggplot2)\ndata(\"iris\")\nirisPlot &lt;- data.frame(\n  Species = c(\"setosa\",\"versicolor\",\"virginica\"),\n  Pedal.Length = c(5.006,5.936,6.588),\n  Pedal.Width = c(3.428,2.770,2.974),\n  Sepal.Length = c(1.462,4.260,5.552),\n  Sepal.Width = c(0.246,1.326,2.026)\n)\n\nggplot(irisPlot, aes(x = Species, y = Pedal.Length, width=(Pedal.Width)/4))+\n  geom_bar(fill = \"orange2\", stat = \"identity\")\n\n\nChart Two - Table Embedded with Charts\nSticking with the Iris data, our table of charts is a scatterplot matrix of the correlations between each of the variables in the dataset, colored by each species.\n\n\n\n\n\n\n\n\n\n\n\nShow the Code\ndata(\"iris\")\nmy_cols &lt;- c(\"#beaed4\", \"#fdc086\", \"#7fc97f\")  \npairs(iris[,1:4], pch = 19,  cex = 0.5,\n      col = my_cols[iris$Species])\n\n\nThree - Horizontal Bar Chart\nFor this we moved to the COVID data set that we used for a previous assignment. Here we showed the amount of new COVID cases in Germany over a duration of four years.\n\n\n\n\n\n\n\n\n\n\n\nShow the Code\nlibrary(vroom)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n\nowidall = vroom(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\nowidgerm &lt;- subset(owidall, location==\"Germany\")\n\npalette &lt;- brewer.pal(7, \"YlGn\")                        #Picking the Palette\ncuts &lt;- cut(owidgerm$new_cases,7)                       #Cutting the data into 7 classes\ncolors &lt;- palette[cuts]\n\nggplot(owidgerm, aes(x = date))+\n  geom_bar(aes(y = new_cases, col=colors), stat = \"identity\", show.legend = F)+\n  coord_flip()\n\n\nChart Four - Overlapping Column Chart\nFinally for this chart we compared the amount of vaccinations per continent for each year. The color of the bars corresponds to each year and the height is the logarithm of the number of vaccinations for each continent.\n\n\n\n\n\n\n\n\n\n\n\nShow the Code\nowidall = vroom(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\nowid20 = subset(owidall, format(date, \"%Y\") == \"2020\")\nowid21 = subset(owidall, format(date, \"%Y\") == \"2021\")\nowid22 = subset(owidall, format(date, \"%Y\") == \"2022\")\nowid23 = subset(owidall, format(date, \"%Y\") == \"2023\")\n\nvax20 &lt;- aggregate(new_vaccinations ~ continent, data = owid20, FUN = sum)\nvax21 &lt;- aggregate(new_vaccinations ~ continent, data = owid21, FUN = sum)\nvax22 &lt;- aggregate(new_vaccinations ~ continent, data = owid22, FUN = sum)\nvax23 &lt;- aggregate(new_vaccinations ~ continent, data = owid23, FUN = sum)\nall &lt;- data.frame(\n  \"continent\" &lt;- c(\"Africa\",\"Asia\",\"Europe\",\"N. America\",\"Oceania\",\"S. America\"),\n  \"2020\" &lt;- c(1,1016774,316297,5785031,1,31136)\n)\n\nall$\"2021\" &lt;- vax21$new_vaccinations\nall$\"2022\" &lt;- vax22$new_vaccinations\nall$\"2023\" &lt;- vax23$new_vaccinations\n\ncolnames(all) &lt;- c(\"continent\",2020,2021,2022,2023)\nggplot(all, aes(x = continent)) +\n  geom_bar(aes(y = log(all$\"2021\")), stat = \"identity\", fill = \"#beaed4\",    position = position_nudge(x = -0.05), width = 0.5) +\n  geom_bar(aes(y = log(all$\"2022\")), stat = \"identity\", fill = \"#fdc086\",  position = position_nudge(x = 0.10),  width = 0.5) +\n  geom_bar(aes(y = log(all$\"2023\")), stat = \"identity\", fill = \"#ffff99\", position = position_nudge(x = 0.05), width = 0.5) +\n  geom_bar(aes(y = log(all$\"2020\")), stat = \"identity\", fill = \"#7fc97f\",   position = position_nudge(x = -0.10), width = 0.5) +\n  ylab(\"Number of Vaccinations\")+\n  xlab(\"Continent\")+\n  theme(axis.text.x = element_text(angle = 315, hjust = 0))"
  },
  {
    "objectID": "posts/6356proposal/index.html",
    "href": "posts/6356proposal/index.html",
    "title": "6356 Proposal",
    "section": "",
    "text": "Proposal Slides"
  },
  {
    "objectID": "posts/6356assignment5/index.html",
    "href": "posts/6356assignment5/index.html",
    "title": "6356 Assignment 5",
    "section": "",
    "text": "1) R-Graphics\n\n\nlibrary(Lock5Data)\ndata(\"HappyPlanetIndex\")\n\n#par(mfrow=c(3, 2))\n\nhist(HappyPlanetIndex$Happiness, \n     main = \"Histogram of Happiness\",\n     xlab = \"Happiness\",\n     ylab = \"Frequency\",\n     col = \"forestgreen\",\n     border = \"black\"\n)\n\n\n\n\n\n\n\nbarplot(head(HappyPlanetIndex$Happiness),\n        col = \"darkorange\",\n        main = \"Happiness by Country\",\n        xlab = \"Country\",\n        ylab = \"Happiness\"\n)\n\n\n\n\n\n\n\nbarplot(head(HappyPlanetIndex$LifeExpectancy),\n        col = \"forestgreen\",\n        horiz = TRUE,\n        main = \"Life Expectancy by Country\",\n        xlab = \"Life Expectancy\",\n        ylab = \"Country\"\n)\n\n\n\n\n\n\n\nregion_counts &lt;- table(HappyPlanetIndex$Region)\ncolors &lt;- rep(c(\"forestgreen\",\"darkorange\",length(region_counts)))\n\npie(region_counts,\n    labels = names(region_counts),\n    col = colors,\n    main = \"Distribution of Regions\",\n    cex.main = 0.8\n)\n\n\n\n\n\n\n\nplot(HappyPlanetIndex$LifeExpectancy, \n     HappyPlanetIndex$Happiness,\n     main = \"Scatter Plot: Life Expectancy vs. Happiness\",\n     xlab = \"Life Expectancy\",\n     ylab = \"Happiness\",\n     col = \"darkorange\",\n     pch = 16\n)\n\n\n\n\n\n\n\n\n2) ggplot2\n\nlibrary(ggplot2)\n\nggplot(HappyPlanetIndex, aes(x = Happiness)) +\n  geom_histogram(fill = \"forestgreen\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Happiness\", x = \"Happiness\", y = \"Frequency\")+\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nggplot(head(HappyPlanetIndex), aes(x = Country, y = Happiness, fill = Country)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"darkorange\") +\n  labs(title = \"Happiness by Country\", x = \"Country\", y = \"Happiness\") +\n  theme_minimal()\n\n\n\n\n\n\n\nggplot(head(HappyPlanetIndex), aes(x = LifeExpectancy, y = Country, fill = Country)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"forestgreen\") +\n  labs(title = \"Life Expectancy by Country\", x = \"Life Expectancy\", y = \"Country\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\nregion_counts &lt;- table(HappyPlanetIndex$Region)\ncolors &lt;- rep(c(\"forestgreen\",\"darkorange\",length(region_counts)))\n\nggplot(HappyPlanetIndex, aes(x = Region, fill = Region)) +\n  geom_bar(width = 1, stat = \"count\", position = \"stack\") +\n  coord_polar(theta = \"y\") +\n  labs(title = \"Distribution of Regions\") +\n  scale_fill_manual(values = colors) +\n  theme_minimal() +\n  theme(axis.text = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\n\n\n\nggplot(HappyPlanetIndex, aes(x = LifeExpectancy, y = Happiness)) +\n  geom_point(color = \"darkorange\", size = 3, shape = 16) +\n  labs(title = \"Scatter Plot: Life Expectancy vs. Happiness\",\n       x = \"Life Expectancy\",\n       y = \"Happiness\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/6356assignment6/index.html",
    "href": "posts/6356assignment6/index.html",
    "title": "6356 Assignment 6",
    "section": "",
    "text": "Shiny Apps\n\nlibrary(shiny)\ndata(\"mtcars\")\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"data\", \"Choose Data Set\", c(\"mtcars\",\"USArrests\"))\n    ),\n    mainPanel(\n      dataTableOutput(table)\n    )\n  )\n)\n\nserver &lt;- function(input, output){\n  data(\"mtcars\")\n  data(\"uspop\")\n  data(\"USArrests\")\n  selectedData &lt;- reactive({\n    switch(input$dataset,\n           \"mtcars\" = mtcars,\n           \"USArrests\" = USArrests)\n  })\n  output$table &lt;- renderDataTable(\n    selectedData()\n  )\n}"
  },
  {
    "objectID": "posts/6356assignment7/index.html",
    "href": "posts/6356assignment7/index.html",
    "title": "Hack-A-Thon",
    "section": "",
    "text": "Chart Nine - Scatter Plot\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"mtcars\")\n\nui &lt;- fluidPage(\n  titlePanel(\"mtcars Scatter Plot\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"VarX\",\n                  label = \"Select X-axis Variable:\",\n                  choices = list(\"mpg\",\"disp\", \"hp\",\"drat\", \"wt\",\"qsec\",\"carb\")),\n      selectInput(inputId = \"VarY\",\n                  label = \"Select Y-axis Variable:\",\n                  choices = list(\"disp\",\"mpg\", \"hp\",\"drat\", \"wt\",\"qsec\",\"carb\")), \n      selectInput(inputId = \"Color\",\n                  label = \"Select Color Variable:\",\n                  choices = as.list(c(\"am\",\"vs\", \"gear\",\"cyl\")))\n    ),\n    mainPanel(plotOutput(\"scatter\")\n              \n    )\n  )\n)\n\n server &lt;- shinyServer(function(input, output) {\n   \n  output$scatter &lt;- renderPlot({\n    mtc &lt;- mtcars[ ,c(input$VarX,input$VarY,input$Color)]\n    mtc[,3] &lt;- as.factor(mtc[,3])\n    \n    ggplot(data = mtc, aes(x=mtc[,1],y=mtc[,2],color=mtc[,3],size=4))+\n      geom_point()+\n      scale_color_manual(values = palette.colors(7,\"Dark2\"))+\n      labs(x=colnames(mtc)[1], y=colnames(mtc)[2],\n           color=colnames(mtc)[3],\n           title = paste(\"Scatter Plot of\", input$VarX, \"v.\", input$VarY))+\n      guides(size = F)\n    \n  })\n  \n})\n\nshinyApp(ui, server)\n\n\nChart Eighteen - Table Embedded with Charts\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"gapminder\")\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder Bubble Plot\"),\n  sidebarLayout(\n    sidebarPanel(\n      checkboxGroupInput(\"region\", \"Select Continent:\", unique(gapminder$continent), selected = \"Asia\"),\n      sliderInput(\"year\", \"Select Year:\", \n                  min = min(gapminder$year), \n                  max = max(gapminder$year), \n                  value = 1952,\n                  step = 5,\n                  animate = \n                    animationOptions(800,T))\n    ),\n    mainPanel(\n      plotOutput(\"scatterplot\")\n    )\n  )\n)\n\n\n\nserver &lt;- function(input, output) {\n  filtered &lt;- reactive({\n    gapminder %&gt;%\n      filter(continent %in% input$region, year == input$year)\n  })\n\n    output$scatterplot &lt;- renderPlot({\n      ggplot(filtered(), aes(gdpPercap, lifeExp, size = pop, col = continent)) +\n        geom_point(pch=1, aes(stroke = 1)) +\n        scale_size_continuous(range = c(6, 18))+\n        scale_color_manual(values = palette.colors(7,\"Dark2\"))+\n        scale_x_continuous(limits=c(0,60000))+\n        scale_y_continuous(limits=c(20,90))+\n        labs(x = \"GDP per Capita\", y = \"Life Expectancy\", \n             title = paste(\"GPD v. Life Expectancy for Year: \", input$year))+\n        theme_bw()\n    })\n}\n\nshinyApp(ui, server)\n\n\nChart Ten - Horizontal Bar Chart\n \n\n\nShow the Code\nlibrary(shiny)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\ndata(\"gapminder\")\nattach(gapminder)\n\nui &lt;- fluidPage(\n  titlePanel(\"Gapminder 3D Chart\"),\n  selectInput(\"region\", \"Choose Continent\", \n              choices = unique(gapminder$continent), selected = \"Asia\"),\n  plotlyOutput(\"graph\", width = \"100%\", height = \"600px\")  \n)\n\nserver &lt;- function(input, output, session){\n  filtered &lt;- reactive({\n    gapminder %&gt;%\n      filter(continent %in% input$region)\n  })\n  \n  output$graph &lt;- renderPlotly({\n    plot_ly(filtered(), \n            x = ~gdpPercap, \n            y = ~lifeExp, \n            z = ~year,\n            color = ~year,\n            text = ~n,\n            hoverinfo = \"text\",\n            hovertext = ~country\n            ) %&gt;%\n      add_markers()\n  })\n}\n\nshinyApp(ui, server)\n\n\n&lt;iframe height=\"800\" width=\"100%\" frameborder=\"no\" src=\"https://jack-macdonald.shinyapps.io/Hack-A-Thon-3D/\"&gt; &lt;/iframe&gt;"
  },
  {
    "objectID": "posts/6356assignment9/index.html",
    "href": "posts/6356assignment9/index.html",
    "title": "6356 Assignment 9",
    "section": "",
    "text": "1) Time-Series Data\n\nlibrary(quantmod)\ngetSymbols(\"AMD\", src=\"yahoo\")\n\n[1] \"AMD\"\n\nhead(AMD)\n\n           AMD.Open AMD.High AMD.Low AMD.Close AMD.Volume AMD.Adjusted\n2007-01-03    20.08    20.40   19.35     19.52   28350300        19.52\n2007-01-04    19.66    19.86   19.32     19.79   23652500        19.79\n2007-01-05    19.54    19.91   19.54     19.71   15902400        19.71\n2007-01-08    19.71    19.86   19.37     19.47   15814800        19.47\n2007-01-09    19.45    19.71   19.37     19.65   14494200        19.65\n2007-01-10    19.64    20.02   19.50     20.01   19783200        20.01\n\nclass(AMD)\n\n[1] \"xts\" \"zoo\"\n\n\n2) Graph\n\nlibrary(TSstudio)\nts_plot(AMD$AMD.Volume, \n        title = \"AMD Volume\",\n        Ytitle = \"\")"
  },
  {
    "objectID": "posts/6356assignment10/index.html",
    "href": "posts/6356assignment10/index.html",
    "title": "6356 Assignment 10",
    "section": "",
    "text": "1) Leaflet\n\nlibrary(tmap)\ntmap_mode(\"view\")\n\ndallas_income &lt;- get_acs(\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  year = 2020,\n  state = \"TX\",\n  county = \"Dallas\",\n  geometry = TRUE\n)\n\nlibrary(mapview)\nmapView(dallas_income, zcol = \"estimate\")\n\n\n\n\n\n2) Spatial Census\n\nacs09 = tidycensus::load_variables(2009, \"acs5\", cache = TRUE)\nacs09_Profile = load_variables(2009 , \"acs5/profile\", cache = TRUE)\nus_median_age09 &lt;- get_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2009,\n  survey = \"acs1\",\n  geometry = TRUE,\n  resolution = \"20m\"\n) %&gt;%\n  shift_geometry()\n\nggplot(data = us_median_age09, aes(fill = estimate)) + \n  geom_sf(col=\"white\") +  \n  theme_bw() +\n  scale_fill_distiller(palette = \"PuBuGn\",  \n                       direction = 1) + \n  labs(title = \"  Median Age by State, 2009\",\n       caption = \"Data source: 2009 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nacs19 = tidycensus::load_variables(2019, \"acs5\", cache = TRUE)\nacs19_Profile = load_variables(2019 , \"acs5/profile\", cache = TRUE)\nus_median_age19 &lt;- get_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2019,\n  survey = \"acs1\",\n  geometry = TRUE,\n  resolution = \"20m\"\n) %&gt;%\n  shift_geometry()\n\nggplot(data = us_median_age19, aes(fill = estimate)) + \n  geom_sf(col=\"white\") +  \n  theme_bw() +\n  scale_fill_distiller(palette = \"PuBuGn\",  \n                       direction = 1) + \n  labs(title = \"  Median Age by State, 2019\",\n       caption = \"Data source: 2019 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nus_median_age19$dif &lt;- (us_median_age19$estimate - us_median_age09$estimate)\n\nggplot(data = us_median_age19, aes(fill = dif)) + \n  geom_sf(col=\"white\") +\n  theme_bw() +\n  scale_fill_distiller(palette = \"RdBu\",\n                       direction = 1) + \n  labs(title = \"  Difference in Median Age by State, 2009 to 2019\",\n       caption = \"Data source: 2009 and 2019 1-year ACS, US Census Bureau\",\n       fill = \"\", family=\"Palatino\") +\n  theme(legend.position=c(.08,.6), legend.direction=\"vertical\") +\n  theme(text = element_text(family = \"Palatino\"), plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "posts/6356project/index.html",
    "href": "posts/6356project/index.html",
    "title": "6356 Project",
    "section": "",
    "text": "Slides\n\n\n\nShiny App\n \n\n\nShow Hidden Code\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(ggplot2)\nlibrary(leaflet)\n\nhouse &lt;- house &lt;- read.csv(\"Copy of house_data.csv\")\ncol &lt;- c(\"PRICE\",\"ADDRESS\",\n         \"CITY\",\"STATE.OR.PROVINCE\",\n         \"ZIP.OR.POSTAL.CODE\",\"SOLD.DATE\",\n         \"BEDS\",\"BATHS\",\"SQUARE.FEET\",\n         \"LOT.SIZE\",\"YEAR.BUILT\",\"LATITUDE\",\n         \"LONGITUDE\",\"URL..SEE.https...www.redfin.com.buy.a.home.comparative.market.analysis.FOR.INFO.ON.PRICING.\")\nhouse &lt;- house[col]\n\nheader &lt;- dashboardHeader(\n  title = \"Frisco Home Sales\"\n)\n\nbody &lt;- dashboardBody(\n  fluidRow(\n    column(width = 9,\n           box(width = NULL, solidHeader = T,\n               leafletOutput(\"map\", height = 500)\n           )\n    ),\n    column(width = 3,\n      box(width = NULL,\n          radioButtons(\"price_range\", \"Select Price Range\",\n                       choices = c(\"$100,000-$200,000\", \n                                   \"$200,000-$300,000\", \n                                   \"$300,000-$400,000\", \n                                   \"$400,000-$500,000\", \n                                   \"$500,000-$600,000\",\n                                   \"$600,000-$700,000\",\n                                   \"$700,000 and Above\"),\n                       selected =  \"$100,000-$200,000\"),\n      ),\n      box(width = NULL,\n          sliderInput(\"bedroom_range\", \"Select Number of Bedrooms\",\n                      min = min(house$BEDS),\n                      max = max(house$BEDS),\n                      value = c(min(house$BEDS), max(house$BEDS)),\n                      step = 1),\n      ),\n      box(width = NULL,\n          sliderInput(\"bathroom_range\", \"Select Number of Bathrooms\",\n                      min = min(house$BATHS),\n                      max = max(house$BATHS),\n                      value = c(min(house$BATHS), max(house$BATHS)),\n                      step = 0.5)\n      )\n    )\n  ),\n  fluidRow(\n    column(width = 12,\n      box(width = NULL, solidHeader = T, style = 'overflow-x: scroll',\n          dataTableOutput(\"filtered_table\")\n      )\n    )\n  )\n)\n\nui &lt;- dashboardPage(\n  skin = \"green\",\n  header,\n  dashboardSidebar(disable = T),\n  body\n)\n\nserver &lt;- function(input,output){\n  filtered_data &lt;- reactive({\n    price_range &lt;- switch(input$price_range,\n                          \"$100,000-$200,000\"  = house$PRICE &gt;= 100000 & house$PRICE &lt; 200000,\n                          \"$200,000-$300,000\"  = house$PRICE &gt;= 200000 & house$PRICE &lt; 300000,\n                          \"$300,000-$400,000\"  = house$PRICE &gt;= 300000 & house$PRICE &lt; 400000,\n                          \"$400,000-$500,000\"  = house$PRICE &gt;= 400000 & house$PRICE &lt; 500000,\n                          \"$500,000-$600,000\"  = house$PRICE &gt;= 500000 & house$PRICE &lt; 600000,\n                          \"$600,000-$700,000\"  = house$PRICE &gt;= 600000 & house$PRICE &lt; 700000,\n                          \"$700,000 and Above\" = house$PRICE &gt;= 500000)\n    subset(house, \n           price_range&\n             BEDS  &gt;= input$bedroom_range[1] & BEDS &lt;= input$bedroom_range[2] &\n             BATHS &gt;= input$bathroom_range[1] & BATHS &lt;= input$bathroom_range[2]\n    )\n  })\n  \n  output$filtered_table &lt;- renderDataTable({\n    filtered_data()\n  })\n  \n  output$map &lt;- renderLeaflet({\n    houseMap &lt;- leaflet(data = filtered_data)  \n    \n    esri &lt;- grep(\"^Esri\", providers, value = TRUE)\n    \n    for (provider in esri) {\n      houseMap &lt;- houseMap %&gt;% addProviderTiles(provider, group = provider)\n    }\n    \n    houseMap %&gt;%\n      addLayersControl(baseGroups = names(esri),\n                       options = layersControlOptions(collapsed = TRUE)) %&gt;%\n      addMarkers(data = filtered_data() %&gt;% as.data.frame(),\n                 lat = ~LATITUDE, lng = ~LONGITUDE, \n                 popup = ~paste(\"Address: \", ADDRESS, \n                                \"&lt;br&gt;Price: $\", PRICE, \n                                \"&lt;br&gt;Bed/Bath: \",BEDS,\"/\",BATHS,\n                                \"&lt;br&gt;Date of Sale: \", SOLD.DATE,\n                                \"&lt;br&gt;House on &lt;a href='\", URL..SEE.https...www.redfin.com.buy.a.home.comparative.market.analysis.FOR.INFO.ON.PRICING., \"' target='_blank'&gt;Redfin&lt;/a&gt;\"))\n    \n  })\n}\n\nshinyApp(ui, server)"
  }
]